# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `json_world` gem.
# Please instead update this file by running `bin/tapioca gem json_world`.

# source://json_world//lib/json_world/json_encodable.rb#1
module JsonWorld; end

# source://json_world//lib/json_world/dsl.rb#10
module JsonWorld::DSL
  extend ::ActiveSupport::Concern
  include ::JsonWorld::JsonEncodable

  mixes_in_class_methods ::JsonWorld::DSL::ClassMethods
end

# source://json_world//lib/json_world/dsl.rb#19
module JsonWorld::DSL::ClassMethods
  # @return [Hash]
  #
  # source://json_world//lib/json_world/dsl.rb#24
  def as_json_schema; end

  # @return [Hash]
  #
  # source://json_world//lib/json_world/dsl.rb#38
  def as_json_schema_without_links; end

  # @note Override
  #
  # source://json_world//lib/json_world/dsl.rb#45
  def inherited(child); end

  # @param link_name [Symbol]
  # @param options [Hash{Symbol => Object}]
  #
  # source://json_world//lib/json_world/dsl.rb#53
  def link(link_name, options = T.unsafe(nil)); end

  # @return [Array<JsonWorld::LinkDefinition>]
  #
  # source://json_world//lib/json_world/dsl.rb#63
  def link_definitions; end

  # Sets the attribute link_definitions
  #
  # @param value the value to set the attribute link_definitions to.
  #
  # source://json_world//lib/json_world/dsl.rb#20
  def link_definitions=(_arg0); end

  # @param property_name [Symbol]
  # @param options [Hash{Symbol => Object}]
  #
  # source://json_world//lib/json_world/dsl.rb#69
  def property(property_name, options = T.unsafe(nil)); end

  # @return [Array<JsonWorld::PropertyDefinition>]
  #
  # source://json_world//lib/json_world/dsl.rb#79
  def property_definitions; end

  # Sets the attribute property_definitions
  #
  # @param value the value to set the attribute property_definitions to.
  #
  # source://json_world//lib/json_world/dsl.rb#21
  def property_definitions=(_arg0); end

  # @return [Array<Symbol>]
  #
  # source://json_world//lib/json_world/dsl.rb#84
  def property_names; end

  # @return [Array<Symbol>]
  #
  # source://json_world//lib/json_world/dsl.rb#89
  def required_property_names; end

  # @note .as_json_schema wrapper
  # @return [String]
  #
  # source://json_world//lib/json_world/dsl.rb#95
  def to_json_schema; end

  private

  # @return [String, nil]
  #
  # source://json_world//lib/json_world/dsl.rb#102
  def description(value = T.unsafe(nil)); end

  # @return [Array<Hash>]
  #
  # source://json_world//lib/json_world/dsl.rb#107
  def links_as_json_schema; end

  # @return [Hash]
  #
  # source://json_world//lib/json_world/dsl.rb#112
  def properties_as_json_schema; end

  # @return [String, nil]
  #
  # source://json_world//lib/json_world/dsl.rb#126
  def schema(value = T.unsafe(nil)); end

  # @return [String, nil]
  #
  # source://json_world//lib/json_world/dsl.rb#121
  def title(value = T.unsafe(nil)); end
end

# source://json_world//lib/json_world/json_encodable.rb#2
module JsonWorld::JsonEncodable
  # @param options [Hash{Symbol => Object}] :except / :only
  # @return [Hash]
  #
  # source://json_world//lib/json_world/json_encodable.rb#5
  def as_json(options = T.unsafe(nil)); end

  private

  # @note receiver.class.property_names must be implemented
  # @param options [Hash{Symbol => Object}] :except / :only
  # @return [Hash]
  #
  # source://json_world//lib/json_world/json_encodable.rb#14
  def properties(options = T.unsafe(nil)); end
end

# source://json_world//lib/json_world/link_definition.rb#2
class JsonWorld::LinkDefinition
  # @param link_name [Symbol]
  # @param options [Hash{Symbol => Object}]
  # @return [LinkDefinition] a new instance of LinkDefinition
  #
  # source://json_world//lib/json_world/link_definition.rb#10
  def initialize(link_name: T.unsafe(nil), **options); end

  # @return [Hash]
  # @todo
  #
  # source://json_world//lib/json_world/link_definition.rb#17
  def as_json_schema; end

  # @return [Symbol]
  #
  # source://json_world//lib/json_world/link_definition.rb#6
  def link_name; end

  private

  # @return [String, nil]
  #
  # source://json_world//lib/json_world/link_definition.rb#35
  def description; end

  # @note #method is reserved by Kernel.#method ;(
  # @return [String]
  #
  # source://json_world//lib/json_world/link_definition.rb#41
  def http_method; end

  # @return [String, nil]
  #
  # source://json_world//lib/json_world/link_definition.rb#46
  def media_type; end

  # @return [String]
  #
  # source://json_world//lib/json_world/link_definition.rb#51
  def path; end

  # @return [String, nil]
  #
  # source://json_world//lib/json_world/link_definition.rb#56
  def rel; end

  # @return [Hash{Symbol => Object}, nil]
  #
  # source://json_world//lib/json_world/link_definition.rb#61
  def schema; end

  # @return [Hash{Symbol => Object}, nil]
  #
  # source://json_world//lib/json_world/link_definition.rb#71
  def target_schema; end

  # @return [String]
  #
  # source://json_world//lib/json_world/link_definition.rb#81
  def title; end
end

# source://json_world//lib/json_world/link_definition.rb#3
JsonWorld::LinkDefinition::DEFAULT_HTTP_METHOD = T.let(T.unsafe(nil), String)

# source://json_world//lib/json_world/property_definition.rb#4
class JsonWorld::PropertyDefinition
  # @param property_name [Symbol, nil] Note that unnamed property can be passed
  # @param options [Hash{Symbol => Object}]
  # @return [PropertyDefinition] a new instance of PropertyDefinition
  #
  # source://json_world//lib/json_world/property_definition.rb#13
  def initialize(property_name: T.unsafe(nil), **options); end

  # @return [Hash{Symbol => Object}]
  #
  # source://json_world//lib/json_world/property_definition.rb#19
  def as_json_schema; end

  # @return [Hash{Symbol => Object}]
  #
  # source://json_world//lib/json_world/property_definition.rb#44
  def as_nested_json_schema; end

  # @return [false, true] True if explicitly this property is defined as optional
  #
  # source://json_world//lib/json_world/property_definition.rb#49
  def optional?; end

  # @return [Hash{Symbol => Object}]
  #
  # source://json_world//lib/json_world/property_definition.rb#6
  def options; end

  # @return [Symbol]
  #
  # source://json_world//lib/json_world/property_definition.rb#9
  def property_name; end

  # @return [Hash{Symbol => Object}]
  #
  # source://json_world//lib/json_world/property_definition.rb#54
  def raw_options; end

  private

  # @return [String, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#63
  def description; end

  # @return [Object]
  #
  # source://json_world//lib/json_world/property_definition.rb#68
  def example; end

  # @note format is preserved by Kernel.#format ;(
  # @return [String, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#74
  def format_type; end

  # @return [false, true]
  #
  # source://json_world//lib/json_world/property_definition.rb#81
  def has_json_schema_compatible_type?; end

  # @note Tuple validation is not supported yet
  # @return [Array<Hash>, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#87
  def items_as_json_schema; end

  # @note pattern can be used only when type is String or not specified
  # @return [Regexp, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#95
  def pattern; end

  # @return [String, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#100
  def pattern_in_string; end

  # @return [Hash, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#107
  def properties_as_json_schema; end

  # @return [Array, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#114
  def property_definitions; end

  # @return [Array<Symbol>, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#126
  def required_property_names; end

  # @return [Array<String>, String, nil]
  #
  # source://json_world//lib/json_world/property_definition.rb#133
  def type; end

  # @note type can be an Array
  # @return [Array<String>]
  #
  # source://json_world//lib/json_world/property_definition.rb#159
  def types; end

  # @return [false, nil, true]
  #
  # source://json_world//lib/json_world/property_definition.rb#164
  def unique_flag; end
end

# source://json_world//lib/json_world/version.rb#2
JsonWorld::VERSION = T.let(T.unsafe(nil), String)
